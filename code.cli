# var fst, snd :: ...(Int? | Char) = (Just(1), 'c')

# var :: Int
# fst = 1, snd = 2

# fun :: (a, a) -> a
# call<Int>@(1, 2) add(fst, snd): fst + snd

# add<Int>(1, 2)
# add<Char>('a', 'b')
# add<String>("a", "b")

# arr .`` add10 .`` multip5 `` reverse ?? (err -> print(err))

# a `abcd.efgh` b

# type Age = Int.data {x -> @math 0 < x < 100}

# fun macint<meta>()
#     arr.(x, i) -> x*2 + i
# end

# type Shape(a) :: Polygon = a: Number => Square(a) | Rectangle(a, a) | Triangle(a, a, a) | Shapeless | as a | as Char
# .data Dt(h), Da, Dy(c) {  
#     Square(a) -> @math 0 < a <= 100,
#     Triangle(a, a, a) -> @math a != b != c,
#     Sides :: Int = 1,
#     isRegular :: Boolean
# }

# var d :: Shape(Int) = Square(1!cm)

# "mountache: {{1, 2, 3}}"


greet(fun(a, b), abc) do
    123
end